{"version":3,"sources":["components/card/card.component.jsx","components/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGe,SAASA,EAAKC,GAC3B,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,WCJjB,IAAMC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAACL,EAAD,CAAuBK,QAASA,GAArBA,EAAQC,U,MCLhB,SAASM,EAAT,GAAiD,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAC9C,OACE,uBACMZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,I,UCHCG,E,kDAEnB,aAAc,IAAD,8BACX,gBAiBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAjBrC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAa,IAJJ,E,gEASO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAUhC,IAAD,EACyBC,KAAKN,MAA9Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpG,OAEE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAACU,EAAD,CACEC,YAAY,kBACZC,aAAce,KAAKf,eACrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnCKI,aCMlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.578c1328.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport default function Card(props) {\n  return (\n    <div className='card-container'>\n      <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n      <h1>{props.monster.name}</h1>\n      <p>{props.monster.email}</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport './card-list.styles.css'\nimport Card from './card/card.component'\n\nexport const CardList = (props) => {\n  return(\n    <div className='card-list'>\n         {props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster}/>\n          ))}\n    </div>\n  )\n}\n","import React from 'react'\nimport './search-box.styles.css'\n\nexport default function SearchBox({placeholder, handleChange}) {\n  return (\n    <input\n          className='search'\n          type='search'\n          placeholder={placeholder}\n          onChange={handleChange}\n          />\n  )\n}\n","import React, { Component } from 'react'\nimport { CardList } from './components/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nimport './App.css';\n\nexport default class App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      monsters : [],\n      searchField: ''\n    }\n    // this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  //arrow function - automatic binding to the place where arrow function is defined\n  //they automatically get whats called lexial scoping\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render() {\n    const {monsters, searchField} = this.state\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search Monsters'\n          handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}